/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Titanium SDK
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.scandit;

import android.app.Activity;

import androidx.annotation.NonNull;

import com.scandit.datacapture.barcode.capture.BarcodeCapture;
import com.scandit.datacapture.barcode.capture.BarcodeCaptureListener;
import com.scandit.datacapture.barcode.capture.BarcodeCaptureSession;
import com.scandit.datacapture.barcode.capture.BarcodeCaptureSettings;
import com.scandit.datacapture.barcode.data.Barcode;
import com.scandit.datacapture.barcode.data.Symbology;
import com.scandit.datacapture.barcode.feedback.BarcodeCaptureFeedback;
import com.scandit.datacapture.barcode.ui.overlay.BarcodeCaptureOverlay;
import com.scandit.datacapture.core.capture.DataCaptureContext;
import com.scandit.datacapture.core.common.feedback.Feedback;
import com.scandit.datacapture.core.common.feedback.Vibration;
import com.scandit.datacapture.core.common.geometry.FloatWithUnit;
import com.scandit.datacapture.core.common.geometry.MeasureUnit;
import com.scandit.datacapture.core.common.geometry.PointWithUnit;
import com.scandit.datacapture.core.data.FrameData;
import com.scandit.datacapture.core.source.Camera;
import com.scandit.datacapture.core.source.CameraSettings;
import com.scandit.datacapture.core.source.FrameSourceState;
import com.scandit.datacapture.core.source.ScanIntention;
import com.scandit.datacapture.core.time.TimeInterval;
import com.scandit.datacapture.core.ui.DataCaptureView;
import com.scandit.datacapture.core.ui.control.Control;
import com.scandit.datacapture.core.ui.control.TorchSwitchControl;
import com.scandit.datacapture.core.ui.viewfinder.LaserlineViewfinder;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.view.TiUIView;


@Kroll.proxy(creatableInModule = TiScanditModule.class)
public class ScanditProxy extends TiViewProxy {
    private static final String LCAT = "ti.scandit";
    DataCaptureContext dataCaptureContext;
    TiUIView view;
    Barcode lastScannedBarcode;
    BarcodeCapture barcodeCapture;
    Camera camera;

    public ScanditProxy() {
        super();
    }

    @Override
    public TiUIView createView(Activity activity) {
        TiUIView view = new ScanditView(this);
        view.getLayoutParams().autoFillsHeight = true;
        view.getLayoutParams().autoFillsWidth = true;
        return view;
    }

    // Handle creation options
    @Override
    public void handleCreationDict(KrollDict options) {
        super.handleCreationDict(options);

        if (options.containsKey("message")) {
            Log.d(LCAT, "example created with message: " + options.get("message"));
        }
    }

    @Kroll.setProperty
    public void isEnable(Boolean value) {
        barcodeCapture.setEnabled(value);
    }

    @Kroll.method
    public void switchToDesiredState(int value) {
        if (camera != null) {
            if (value == TiScanditModule.ON) {
                camera.switchToDesiredState(FrameSourceState.ON);
            } else {
                camera.switchToDesiredState(FrameSourceState.OFF);
            }
        }
    }

    @Override
    public void onPause(Activity activity) {
        super.onPause(activity);
        isEnable(false);
        camera.switchToDesiredState(FrameSourceState.OFF);
    }

    @Override
    public void onResume(Activity activity) {
        super.onResume(activity);
        isEnable(true);
        camera.switchToDesiredState(FrameSourceState.ON);
    }

    private class ScanditView extends TiUIView {
        public ScanditView(TiViewProxy proxy) {
            super(proxy);
            String key = TiConvert.toString(proxy.getProperty("key"), "");
            if (key.isEmpty()) {
                Log.e(LCAT, "Please set the key property");
                return;
            }
            dataCaptureContext = DataCaptureContext.forLicenseKey(key);

            BarcodeCaptureSettings settings = new BarcodeCaptureSettings();

            int[] symbologies = TiConvert.toIntArray((Object[]) proxy.getProperty("symbologies"));

            for (int symbol : symbologies) {
                if (symbol == TiScanditModule.Code128) {
                    settings.enableSymbology(Symbology.CODE128, true);
                } else if (symbol == TiScanditModule.EAN13UPCA) {
                    settings.enableSymbology(Symbology.EAN13_UPCA, true);
                    settings.getSymbologySettings(Symbology.EAN13_UPCA).setExtensionEnabled("remove_leading_upca_zero", true);
                } else if (symbol == TiScanditModule.Code39) {
                    settings.enableSymbology(Symbology.CODE39, true);
                } else if (symbol == TiScanditModule.QR) {
                    settings.enableSymbology(Symbology.QR, true);
                } else if (symbol == TiScanditModule.EAN8) {
                    settings.enableSymbology(Symbology.EAN8, true);
                } else if (symbol == TiScanditModule.UPCE) {
                    settings.enableSymbology(Symbology.UPCE, true);
                }
            }

            int scanIntention = TiConvert.toInt(proxy.getProperty("scanIntention"), 0);
            if (scanIntention == 1) {
                settings.setScanIntention(ScanIntention.SMART);
            } else {
                settings.setScanIntention(ScanIntention.MANUAL);
            }

            settings.setCodeDuplicateFilter(TimeInterval.millis(TiConvert.toInt(proxy.getProperty("cacheTime"), 1000)));
            barcodeCapture = BarcodeCapture.forDataCaptureContext(dataCaptureContext, settings);

            CameraSettings cameraSettings = BarcodeCapture.createRecommendedCameraSettings();

            camera = Camera.getDefaultCamera();

            if (camera != null) {
                camera.applySettings(cameraSettings);
                dataCaptureContext.setFrameSource(camera);
            }

            DataCaptureView dataCaptureView = DataCaptureView.newInstance(TiApplication.getAppRootOrCurrentActivity(), dataCaptureContext);
            BarcodeCaptureOverlay overlay = BarcodeCaptureOverlay.newInstance(barcodeCapture, dataCaptureView);

            BarcodeCaptureFeedback barcodeCaptureFeedback = new BarcodeCaptureFeedback();
            if (TiConvert.toBoolean(proxy.getProperty("vibrate"), false)) {
                barcodeCaptureFeedback.setSuccess(new Feedback(new Vibration()));
            }
            barcodeCapture.setFeedback(barcodeCaptureFeedback);

            if (TiConvert.toBoolean(proxy.getProperty("torch"), false)) {
                Control control = new TorchSwitchControl(TiApplication.getAppRootOrCurrentActivity());
                dataCaptureView.addControl(control);
            }

            setNativeView(dataCaptureView);
            barcodeCapture.addListener(new BarcodeCaptureListener() {
                @Override
                public void onBarcodeScanned(@NonNull BarcodeCapture barcodeCapture, @NonNull BarcodeCaptureSession session, @NonNull FrameData frameData) {
                    if (session.getNewlyRecognizedBarcode() != null) {
                        lastScannedBarcode = session.getNewlyRecognizedBarcode();
                        String code = lastScannedBarcode.getData() != null ? lastScannedBarcode.getData() : "";
                        KrollDict kd = new KrollDict();

                        int symbol = -1;
                        if (lastScannedBarcode.getSymbology() == Symbology.CODE128) {
                            symbol = TiScanditModule.Code128;
                        } else if (lastScannedBarcode.getSymbology() == Symbology.EAN13_UPCA) {
                            symbol = TiScanditModule.EAN13UPCA;
                        } else if (lastScannedBarcode.getSymbology() == Symbology.CODE39) {
                            symbol = TiScanditModule.Code39;
                        } else if (lastScannedBarcode.getSymbology() == Symbology.QR) {
                            symbol = TiScanditModule.QR;
                        } else if (lastScannedBarcode.getSymbology() == Symbology.EAN8) {
                            symbol = TiScanditModule.EAN8;
                        } else if (lastScannedBarcode.getSymbology() == Symbology.UPCE) {
                            symbol = TiScanditModule.UPCE;
                        }

                        kd.put("data", code);
                        kd.put("symbology", symbol);
                        kd.put("isGs1DataCarrier", lastScannedBarcode.isGs1DataCarrier());
                        fireEvent("scan", kd);
                    }
                }

                @Override
                public void onSessionUpdated(@NonNull BarcodeCapture barcodeCapture, @NonNull BarcodeCaptureSession barcodeCaptureSession, @NonNull FrameData frameData) {

                }

                @Override
                public void onObservationStarted(@NonNull BarcodeCapture barcodeCapture) {

                }

                @Override
                public void onObservationStopped(@NonNull BarcodeCapture barcodeCapture) {

                }
            });
        }

        @Override
        public void processProperties(KrollDict d) {
            super.processProperties(d);
        }
    }
}
